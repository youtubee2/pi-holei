#!/bin/bash
# Pi-hole: A black hole for Internet advertisements
# (c) 2015, 2016 by Jacob Salmela
# Network-wide ad blocking via your Raspberry Pi
# http://pi-hole.net
# Controller for all pihole scripts and functions.
#
# Pi-hole is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# Must be root to use this tool
if [[ ! $EUID -eq 0 ]];then
    if [ -x "$(command -v sudo)" ];then
        exec sudo bash "$0" "$@"
        exit $?
    else
        echo "::: sudo is needed to run pihole commands.  Please run this script as root or install sudo."
        exit 1
    fi
fi

whitelistFunc() {
    shift
    /opt/pihole/whitelist.sh "$@"
    exit 0
}

blacklistFunc() {
    shift
    /opt/pihole/blacklist.sh "$@"
    exit 0
}

debugFunc() {
    /opt/pihole/piholeDebug.sh
    exit 0
}

flushFunc() {
    /opt/pihole/piholeLogFlush.sh
    exit 0
}


updatePiholeFunc() {
    /opt/pihole/update.sh
    exit 0
}

reconfigurePiholeFunc() {
    /etc/.pihole/automated\ install/basic-install.sh --reconfigure
    exit 0;
}

updateGravityFunc() {
    /opt/pihole/gravity.sh "$@"
    exit 0
}

setupLCDFunction() {
    /opt/pihole/setupLCD.sh
    exit 0
}

queryFunc() {
    domain=$2
    for list in /etc/pihole/list.*
    do
        count=$(grep ${domain} $list | wc -l)
        echo "::: ${list} (${count} results)"
        if [[ ${count} > 0 ]]; then
            grep ${domain} ${list}
        fi
        echo ""
    done
    exit 0
}

chronometerFunc() {
    shift
    /opt/pihole/chronometer.sh "$@"
    exit 0
}


uninstallFunc() {
    /opt/pihole/uninstall.sh
    exit 0
}

versionFunc() {
    shift
    /opt/pihole/version.sh "$@"
    exit 0
}

restartDNS() {
  dnsmasqPid=$(pidof dnsmasq)
  if [[ ${dnsmasqPid} ]]; then
    # service already running - reload config
    if [ -x "$(command -v systemctl)" ]; then
      systemctl restart dnsmasq
    else
      service dnsmasq restart
    fi
  else
    # service not running, start it up
    if [ -x "$(command -v systemctl)" ]; then
      systemctl start dnsmasq
    else
      service dnsmasq start
    fi
  fi
}

piholeEnable() {
  if [[ "${1}" == "0" ]] ; then
    #Disable Pihole
    sed -i 's/^addn-hosts/#addn-hosts/' /etc/dnsmasq.d/01-pihole.conf
  else
    #Enable pihole
    sed -i 's/^#addn-hosts/addn-hosts/' /etc/dnsmasq.d/01-pihole.conf
  fi
  restartDNS
}

piholeStatus() {
  if [[ $(cat /etc/dnsmasq.d/01-pihole.conf | grep "#addn-hosts=/") ]] ; then
    #list is commented out
    if [[ "${1}" == "web" ]] ; then 
	  echo 0; 
	else 
	  echo ":::  pihole is Disabled";
    fi
  elif [[ $(cat /etc/dnsmasq.d/01-pihole.conf | grep "addn-hosts=/") ]] ; then
	#list set
	if [[ "${1}" == "web" ]] ; then
      echo 1; 
	else 
	  echo ":::  pihole is Enabled";
    fi
  else
    #addn-host not found
    if [[ "${1}" == "web" ]] ; then
	  echo 99
	else
      echo ":::  no hosts file linked to dnsmasq, adding it in enabled state"
	fi
	#add addn-host= to dnsmasq
    echo "addn-hosts=/etc/pihole/gravity.list" >> /etc/dnsmasq.d/01-pihole.conf
    restartDNS
  fi
}


helpFunc() {
    echo "::: Control all PiHole specific functions!"
    echo ":::"
    echo "::: Usage: pihole [options]"
    echo ":::		Add -h after -w (whitelist), -b (blacklist), or -c (chronometer)  for more information on usage"
    echo ":::"
    echo "::: Options:"
    echo ":::  -w, whitelist            Whitelist domains"
    echo ":::  -b, blacklist            Blacklist domains"
    echo ":::  -d, debug                Start a debugging session if having trouble"
    echo ":::  -f, flush                Flush the pihole.log file"
    echo ":::  -up, updatePihole        Update Pi-hole"
    echo ":::  -g, updateGravity        Update the list of ad-serving domains"
    echo ":::  -s, setupLCD             Automatically configures the Pi to use the 2.8 LCD screen to display stats on it"
    echo ":::  -c, chronometer          Calculates stats and displays to an LCD"
    echo ":::  -h, help                 Show this help dialog"
    echo ":::  -v, version              Show current versions"
    echo ":::  -q, query                Query the adlists for a specific domain"
    echo ":::  uninstall                Uninstall Pi-Hole from your system :(!"
    echo ":::  status                   Is Pi-Hole Enabled or Disabled"
    echo ":::  enable                   Enable Pi-Hole DNS Blocking"
    echo ":::  disable                  Disable Pi-Hole DNS Blocking"
    echo ":::  restartdns               Restart dnsmasq"
    exit 0
}

if [[ $# = 0 ]]; then
    helpFunc
fi

# Handle redirecting to specific functions based on arguments
case "$1" in
"-w" | "whitelist"			) whitelistFunc "$@";;
"-b" | "blacklist"			) blacklistFunc "$@";;
"-d" | "debug"				) debugFunc;;
"-f" | "flush"				) flushFunc;;
"-up" | "updatePihole"      ) updatePiholeFunc;;
"-r"  | "reconfigure"       ) reconfigurePiholeFunc;;
"-g" | "updateGravity"		) updateGravityFunc "$@";;
"-s" | "setupLCD"			) setupLCDFunction;;
"-c" | "chronometer"		) chronometerFunc "$@";;
"-h" | "help"				) helpFunc;;
"-v" | "version"            ) versionFunc "$@";;
"-q" | "query"              ) queryFunc "$@";;
"uninstall"					) uninstallFunc;;
"enable"                      ) piholeEnable 1;;
"disable"                     ) piholeEnable 0;;
"status"                      ) piholeStatus "$2";;
"restartdns"                  ) restartDNS;;

*                    		) helpFunc;;
esac
