#!/bin/bash
# Pi-hole: A black hole for Internet advertisements
# (c) 2015, 2016 by Jacob Salmela
# Network-wide ad blocking via your Raspberry Pi
# http://pi-hole.net
# Controller for all pihole scripts and functions.
#
# Pi-hole is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# Must be root to use this tool
if [[ ! $EUID -eq 0 ]];then
    if [ -x "$(command -v sudo)" ];then
        exec sudo bash "$0" "$@"
        exit $?
    else
        echo "::: sudo is needed to run pihole commands.  Please run this script as root or install sudo."
        exit 1
    fi
fi

whitelistFunc() {
    shift
    /opt/pihole/whitelist.sh "$@"
    exit 0
}

blacklistFunc() {
    shift
    /opt/pihole/blacklist.sh "$@"
    exit 0
}

debugFunc() {
    /opt/pihole/piholeDebug.sh
    exit 0
}

flushFunc() {
    /opt/pihole/piholeLogFlush.sh
    exit 0
}

getGitFiles() {
	# Setup git repos for directory and repository passed
	# as arguments 1 and 2
	echo ":::"
	echo "::: Checking for existing repository..."
	if is_repo "${1}"; then
	  update_repo "${1}"
	else
	  make_repo "${1}" "${2}"
  fi
}

is_repo() {
  # Use git to check if directory is currently under VCS
	echo -n ":::    Checking $1 is a repo..."
	cd "${1}" &> /dev/null || return 1
	git status &> /dev/null && echo " OK!"; return 0 || echo " not found!"; return 1
}

make_repo() {
    # Remove the non-repod interface and clone the interface
    echo -n ":::    Cloning $2 into $1..."
    rm -rf "${1}"
    git clone -q --depth 1 "${2}" "${1}" > /dev/null & spinner $!
    echo " done!"
}

update_repo() {
    # Pull the latest commits
    echo -n ":::     Updating repo in $1..."
    cd "${1}" || exit 1
    git pull -q > /dev/null & spinner $!
    echo " done!"
}

updatePiholeFunc() {

    webInterfaceGitUrl="https://github.com/pi-hole/AdminLTE.git"
    webInterfaceDir="/var/www/html/admin"
    piholeGitUrl="https://github.com/pi-hole/pi-hole.git"
    piholeFilesDir="/etc/.pihole"

    if [ ! -d "/etc/.pihole" ]; then #This is unlikely
        echo "::: Critical Error: Pi-Hole repo missing from system!"
        echo "::: Please re-run install script from https://github.com/pi-hole/pi-hole"
        exit 1;
    fi
    if [ ! -d "/var/www/html/admin" ]; then #This is unlikely
        echo "::: Critical Error: Pi-Hole repo missing from system!"
        echo "::: Please re-run install script from https://github.com/pi-hole/pi-hole"
        exit 1;
    fi

    echo "::: Checking for updates..."
    piholeVersion=$(cd /etc/.pihole/ && git describe --tags --abbrev=0)
    piholeVersionLatest=$(curl -s https://api.github.com/repos/pi-hole/pi-hole/releases/latest | grep -Po '"tag_name":.*?[^\\]",' |  perl -pe 's/"tag_name": "//; s/^"//; s/",$//')

    webVersion=$(cd /var/www/html/admin/ && git describe --tags --abbrev=0)
    webVersionLatest=$(curl -s https://api.github.com/repos/pi-hole/AdminLTE/releases/latest | grep -Po '"tag_name":.*?[^\\]",' |  perl -pe 's/"tag_name": "//; s/^"//; s/",$//')

    echo "::: Pi-hole version is $piholeVersion (Latest version is $piholeVersionLatest)"
    echo "::: Web Admin version is $webVersion (Latest version is $webVersionLatest)"
    echo ":::"

    if [[ ${piholeVersion} == ${piholeVersionLatest} ]] ; then
        echo "::: Pi-hole Base files are already up to date! Version: ${piholeVersionLatest}"
        echo "::: No need to update!"
        echo ":::"

        if [[ ${webVersion} == ${webVersionLatest} ]] ; then
            echo "::: Web Admin files are already up to date!  Version: ${webVersionLatest}"
            echo "::: No need to update!"
            echo ":::"
        else
            echo "::: An Update is available for the Web Admin!"
            echo ":::"
            echo "::: Fetching latest changes from GitHub..."
            # Update Git files for Core
            getGitFiles ${webInterfaceDir} ${webInterfaceGitUrl}
            echo ":::"
            echo "::: Pi-hole Web Admin has been updated to ${webVersionLatest}"
            echo "::: See https://changes.pi-hole.net for details"
        fi
    else
        echo -n "::: An update is available for "
        if [[ ${webVersion} == ${webVersionLatest} ]] ; then
            echo " Pi-Hole!"
        else
            echo " Pi-Hole base files and the Web Admin. Both will be updated!"
        fi

        echo "::: Fetching latest changes from GitHub..."
        # Update Git files for Core
        getGitFiles ${piholeFilesDir} ${piholeGitUrl}
        /etc/.pihole/automated\ install/basic-install.sh --unattended

        echo ":::"
        echo "::: Pi-hole has been updated to version ${piholeVersionLatest}"
        if [[ ${webVersion} != ${webVersionLatest} ]] ; then
            echo "::: Web Admin has been updated to version ${webVersionLatest}"
        fi
        echo ":::"
        echo "::: See https://changes.pi-hole.net for details"
    fi

    exit 0
}

reconfigurePiholeFunc() {
    /etc/.pihole/automated\ install/basic-install.sh --reconfigure
    exit 0;
}

updateGravityFunc() {
    /opt/pihole/gravity.sh "$@"
    exit 0
}

setupLCDFunction() {
    /opt/pihole/setupLCD.sh
    exit 0
}

queryFunc() {
    domain=$2
    for list in /etc/pihole/list.*
    do
        count=$(grep ${domain} $list | wc -l)
        echo "::: ${list} (${count} results)"
        if [[ ${count} > 0 ]]; then
            grep ${domain} ${list}
        fi
        echo ""
    done
    exit 0
}

chronometerFunc() {
    shift
    /opt/pihole/chronometer.sh "$@"
    exit 0
}


uninstallFunc() {
    /opt/pihole/uninstall.sh
    exit 0
}

versionFunc() {
    shift
    /opt/pihole/version.sh "$@"
    exit 0
}

helpFunc() {
    echo "::: Control all PiHole specific functions!"
    echo ":::"
    echo "::: Usage: pihole [options]"
    echo ":::		Add -h after -w (whitelist), -b (blacklist), or -c (chronometer)  for more information on usage"
    echo ":::"
    echo "::: Options:"
    echo ":::  -w, whitelist            Whitelist domains"
    echo ":::  -b, blacklist            Blacklist domains"
    echo ":::  -d, debug                Start a debugging session if having trouble"
    echo ":::  -f, flush                Flush the pihole.log file"
    echo ":::  -up, updatePihole        Update Pi-hole"
    echo ":::  -g, updateGravity        Update the list of ad-serving domains"
    echo ":::  -s, setupLCD             Automatically configures the Pi to use the 2.8 LCD screen to display stats on it"
    echo ":::  -c, chronometer          Calculates stats and displays to an LCD"
    echo ":::  -h, help                 Show this help dialog"
    echo ":::  -v, version              Show current versions"
    echo ":::  -q, query                Query the adlists for a specific domain"
    echo ":::  uninstall                Uninstall Pi-Hole from your system :(!"
    exit 0
}

if [[ $# = 0 ]]; then
    helpFunc
fi

# Handle redirecting to specific functions based on arguments
case "$1" in
"-w" | "whitelist"			) whitelistFunc "$@";;
"-b" | "blacklist"			) blacklistFunc "$@";;
"-d" | "debug"				) debugFunc;;
"-f" | "flush"				) flushFunc;;
"-up" | "updatePihole"      ) updatePiholeFunc;;
"-r"  | "reconfigure"       ) reconfigurePiholeFunc;;
"-g" | "updateGravity"		) updateGravityFunc "$@";;
"-s" | "setupLCD"			) setupLCDFunction;;
"-c" | "chronometer"		) chronometerFunc "$@";;
"-h" | "help"				) helpFunc;;
"-v" | "version"            ) versionFunc "$@";;
"-q" | "query"              ) queryFunc "$@";;
"uninstall"					) uninstallFunc;;
*                    		) helpFunc;;
esac
