#!/bin/bash
# Pi-hole: A black hole for Internet advertisements
# (c) 2015, 2016 by Jacob Salmela
# Network-wide ad blocking via your Raspberry Pi
# http://pi-hole.net
# Controller for all pihole scripts and functions.
#
# Pi-hole is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# Must be root to use this tool
if [[ ! $EUID -eq 0 ]];then
	if [ -x "$(command -v sudo)" ];then
		exec sudo bash "$0" "$@"
		exit $?
	else
		echo "::: sudo is needed to run pihole commands.  Please run this script as root or install sudo."
		exit 1
	fi
fi

whitelistFunc() {
	/opt/pihole/list.sh "$@"
	exit 0
}

blacklistFunc() {
	/opt/pihole/list.sh "$@"
	exit 0
}

debugFunc() {
	/opt/pihole/piholeDebug.sh
	exit 0
}

flushFunc() {
	/opt/pihole/piholeLogFlush.sh
	exit 0
}


updatePiholeFunc() {
	/opt/pihole/update.sh
	exit 0
}

reconfigurePiholeFunc() {
	/etc/.pihole/automated\ install/basic-install.sh --reconfigure
	exit 0;
}

updateGravityFunc() {
	/opt/pihole/gravity.sh "$@"
	exit 0
}

setupLCDFunction() {
	/opt/pihole/setupLCD.sh
	exit 0
}

queryFunc() {
	domain=$2
	for list in /etc/pihole/list.*; do
		count=$(grep ${domain} $list | wc -l)
		echo "::: ${list} (${count} results)"
			if [[ ${count} > 0 ]]; then
				grep ${domain} ${list}
			fi
		echo ""
	done
	exit 0
}

chronometerFunc() {
	shift
	/opt/pihole/chronometer.sh "$@"
	exit 0
}


uninstallFunc() {
	/opt/pihole/uninstall.sh
	exit 0
}

versionFunc() {
	shift
	/opt/pihole/version.sh "$@"
	exit 0
}

restartDNS() {
  dnsmasqPid=$(pidof dnsmasq)
  if [[ ${dnsmasqPid} ]]; then
    # service already running - reload config
    if [ -x "$(command -v systemctl)" ]; then
      systemctl restart dnsmasq
    else
      service dnsmasq restart
    fi
  else
    # service not running, start it up
    if [ -x "$(command -v systemctl)" ]; then
      systemctl start dnsmasq
    else
      service dnsmasq start
    fi
  fi
}

piholeEnable() {
  if [[ "${1}" == "0" ]] ; then
    #Disable Pihole
    sed -i 's/^addn-hosts/#addn-hosts/' /etc/dnsmasq.d/01-pihole.conf
    echo "::: Blocking has been disabled!"
  else
    #Enable pihole
    echo "::: Blocking has been enabled!"
    sed -i 's/^#addn-hosts/addn-hosts/' /etc/dnsmasq.d/01-pihole.conf
  fi
  restartDNS
}

piholeLogging() {
  shift

  if [[ "${1}" == "off" ]] ; then
    #Disable Logging
    sed -i 's/^log-queries/#log-queries/' /etc/dnsmasq.d/01-pihole.conf
    sed -i 's/^QUERY_LOGGING=true/QUERY_LOGGING=false/' /etc/pihole/setupVars.conf
    pihole -f
    echo "::: Logging has been disabled!"
  elif [[ "${1}" == "on" ]] ; then
    #Enable logging
    sed -i 's/^#log-queries/log-queries/' /etc/dnsmasq.d/01-pihole.conf
    sed -i 's/^QUERY_LOGGING=false/QUERY_LOGGING=true/' /etc/pihole/setupVars.conf
    echo "::: Logging has been enabled!"
  else
    echo "::: Invalid option passed, please pass 'on' or 'off'"
    exit 1
  fi
  restartDNS
}

piholeStatus() {
  if [[ $(grep -i "^#addn-hosts=/" /etc/dnsmasq.d/01-pihole.conf) ]] ; then
    #list is commented out
    if [[ "${1}" == "web" ]] ; then
      echo 0;
    else
      echo "::: Pi-hole blocking is Disabled";
    fi
  elif [[ $(grep -i "^addn-hosts=/" /etc/dnsmasq.d/01-pihole.conf) ]] ; then
    #list set
    if [[ "${1}" == "web" ]] ; then
      echo 1;
    else
      echo "::: Pi-hole blocking is Enabled";
    fi
  else
    #addn-host not found
    if [[ "${1}" == "web" ]] ; then
      echo 99
    else
      echo ":::  No hosts file linked to dnsmasq, adding it in enabled state"
    fi
    #add addn-host= to dnsmasq
    echo "addn-hosts=/etc/pihole/gravity.list" >> /etc/dnsmasq.d/01-pihole.conf
    restartDNS
  fi
}


helpFunc() {
	cat << EOM
::: Control all PiHole specific functions!
:::
::: Usage: pihole [options]
:::		Add -h after -w (whitelist), -b (blacklist), or -c (chronometer)  for more information on usage
:::
::: Options:
:::  -w, whitelist            Whitelist domains
:::  -b, blacklist            Blacklist domains
:::  -d, debug                Start a debugging session if having trouble
:::  -f, flush                Flush the pihole.log file
:::  -up, updatePihole        Update Pi-hole
:::  -g, updateGravity        Update the list of ad-serving domains
:::  -s, setupLCD             Automatically configures the Pi to use the 2.8 LCD screen to display stats on it
:::  -c, chronometer          Calculates stats and displays to an LCD
:::  -h, help                 Show this help dialog
:::  -v, version              Show current versions
:::  -q, query                Query the adlists for a specific domain
:::  -l, logging              Enable or Disable logging (pass 'on' or 'off')
:::  uninstall                Uninstall Pi-Hole from your system :(!
:::  status                   Is Pi-Hole Enabled or Disabled
:::  enable                   Enable Pi-Hole DNS Blocking
:::  disable                  Disable Pi-Hole DNS Blocking
:::  restartdns               Restart dnsmasq
EOM
	exit 1
}

if [[ $# = 0 ]]; then
	helpFunc
fi

# Handle redirecting to specific functions based on arguments
case "${1}" in
	"-w" | "whitelist"			) whitelistFunc "$@";;
	"-b" | "blacklist"			) blacklistFunc "$@";;
	"-d" | "debug"				) debugFunc;;
	"-f" | "flush"				) flushFunc;;
	"-up" | "updatePihole"      ) updatePiholeFunc;;
	"-r"  | "reconfigure"       ) reconfigurePiholeFunc;;
	"-g" | "updateGravity"		) updateGravityFunc "$@";;
	"-s" | "setupLCD"			) setupLCDFunction;;
	"-c" | "chronometer"		) chronometerFunc "$@";;
	"-h" | "help"				) helpFunc;;
	"-v" | "version"            ) versionFunc "$@";;
	"-q" | "query"              ) queryFunc "$@";;
	"-l" | "logging"            ) piholeLogging "$@";;
	"uninstall"					) uninstallFunc;;
	"enable"                      ) piholeEnable 1;;
    "disable"                     ) piholeEnable 0;;
    "status"                      ) piholeStatus "$2";;
    "restartdns"                  ) restartDNS;;
	*                    		) helpFunc;;
esac
